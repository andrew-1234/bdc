
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "bdc"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('bdc')
The legacy packages maptools, rgdal, and rgeos, underpinning the sp package,
which was just loaded, will retire in October 2023.
Please refer to R-spatial evolution reports for details, especially
https://r-spatial.org/r/2023/05/15/evolution4.html.
It may be desirable to make the sf package available;
package maintainers should consider adding sf to Suggests:.
The sp package is now running under evolution status 2
     (status 2 uses the sf package in place of rgdal)
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("bdc_basisOfRecords_notStandard")
> ### * bdc_basisOfRecords_notStandard
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdc_basisOfRecords_notStandard
> ### Title: Identify records from doubtful source (e.g., 'fossil',
> ###   MachineObservation')
> ### Aliases: bdc_basisOfRecords_notStandard
> 
> ### ** Examples
> 
> x <- data.frame(basisOfRecord = c(
+   "FOSSIL_SPECIMEN", "UNKNOWN",
+   "RON", NA, "Specimen", "PRESERVED_SPECIMEN"
+ ))
> 
> bdc_basisOfRecords_notStandard(
+   data = x, 
+   basisOfRecord = "basisOfRecord",
+   names_to_keep = "all"
+ )

bdc_basisOfRecords_notStandard:
Flagged 2 of the following specific nature:
 c("FOSSIL_SPECIMEN", "RON") 
One column was added to the database.

       basisOfRecord .basisOfRecords_notStandard
1    FOSSIL_SPECIMEN                       FALSE
2            UNKNOWN                        TRUE
3                RON                       FALSE
4               <NA>                        TRUE
5           Specimen                        TRUE
6 PRESERVED_SPECIMEN                        TRUE
> 
> 
> 
> cleanEx()
> nameEx("bdc_clean_names")
> ### * bdc_clean_names
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdc_clean_names
> ### Title: Clean and parse scientific names
> ### Aliases: bdc_clean_names
> 
> ### ** Examples
> 
> ## Not run: 
> ##D scientificName <- c(
> ##D   "Fridericia bahiensis (Schauer ex. DC.) L.G.Lohmann",
> ##D   "Peltophorum dubium (Spreng.) Taub. (Griseb.) Barneby",
> ##D   "Gymnanthes edwalliana (Pax & K.Hoffm.) Laurenio-Melo & M.F.Sales",
> ##D   "LEGUMINOSAE Senna aff. organensis (Glaz. ex Harms) H.S.Irwin & Barneby"
> ##D )
> ##D 
> ##D bdc_clean_names(scientificName, save_outputs = FALSE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("bdc_coordinates_country_inconsistent")
> ### * bdc_coordinates_country_inconsistent
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdc_coordinates_country_inconsistent
> ### Title: Identify records within a reference country
> ### Aliases: bdc_coordinates_country_inconsistent
> 
> ### ** Examples
> 
> ## Not run: 
> ##D x <- data.frame(
> ##D   country = c("Brazil", "Brazil", "Bolivia", "Argentina", "Peru"),
> ##D   decimalLongitude = c(-40.6003, -39.6, -77.689288, NA, -76.352930),
> ##D   decimalLatitude = c(-19.9358, -13.016667, -20.5243, -35.345940, -11.851872)
> ##D )
> ##D 
> ##D bdc_coordinates_country_inconsistent(
> ##D   data = x,
> ##D   country_name = c("Brazil", "Peru", "Argentina"),
> ##D   country = "country",
> ##D   lon = "decimalLongitude",
> ##D   lat = "decimalLatitude",
> ##D   dist = 0.1 
> ##D )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("bdc_coordinates_empty")
> ### * bdc_coordinates_empty
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdc_coordinates_empty
> ### Title: Identify records with empty geographic coordinates
> ### Aliases: bdc_coordinates_empty
> 
> ### ** Examples
> 
> x <- data.frame(
+   decimalLatitude = c(19.9358, -13.016667, NA, ""),
+   decimalLongitude = c(-40.6003, -39.6, -20.5243, NA)
+ )
> 
> bdc_coordinates_empty(
+   data = x,
+   lat = "decimalLatitude",
+   lon = "decimalLongitude"
+ )

bdc_coordinates_empty:
Flagged 2 records.
One column was added to the database.

  decimalLatitude decimalLongitude .coordinates_empty
1         19.9358         -40.6003               TRUE
2      -13.016667         -39.6000               TRUE
3            <NA>         -20.5243              FALSE
4                               NA              FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("bdc_coordinates_from_locality")
> ### * bdc_coordinates_from_locality
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdc_coordinates_from_locality
> ### Title: Identify records lacking or with invalid coordinates but
> ###   containing locality information
> ### Aliases: bdc_coordinates_from_locality
> 
> ### ** Examples
> 
> x <- data.frame(
+   lat = c(NA, NA, ""), 
+   lon = c("", NA, NA), 
+   locality = c("PARAGUAY: ALTO PARAGUAY: CO.; 64KM W PUERTO SASTRE", 
+                "Parque Estadual da Serra de Caldas Novas, Goias, Brazil", 
+                "Parque Nacional Iguazu"))
> 
> bdc_coordinates_from_locality(
+ data = x, 
+ lat = "lat", 
+ lon = "lon", 
+ locality = "locality", 
+ save_outputs = FALSE)

bdc_coordinates_from_locality 
Found 3 records missing or with invalid coordinates but with potentially useful information on locality.

   lat  lon                                                locality
1 <NA>           PARAGUAY: ALTO PARAGUAY: CO.; 64KM W PUERTO SASTRE
2 <NA> <NA> Parque Estadual da Serra de Caldas Novas, Goias, Brazil
3      <NA>                                  Parque Nacional Iguazu
  .coordinates_empty .coordinates_outOfRange
1              FALSE                    TRUE
2              FALSE                    TRUE
3              FALSE                    TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("bdc_coordinates_outOfRange")
> ### * bdc_coordinates_outOfRange
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdc_coordinates_outOfRange
> ### Title: Identify records with out-of-range geographic coordinates
> ### Aliases: bdc_coordinates_outOfRange
> 
> ### ** Examples
> 
> x <- data.frame(
+   decimalLatitude = c(-185.111, -43.34, "", -21.8069444),
+   decimalLongitude = c(-45.4, -39.6, -20.5243, -440.9055555)
+ )
> 
> bdc_coordinates_outOfRange(
+   data = x,
+   lat = "decimalLatitude",
+   lon = "decimalLongitude"
+ )

bdc_coordinates_outOfRange:
Flagged 2 records.
One column was added to the database.

  decimalLatitude decimalLongitude .coordinates_outOfRange
1        -185.111         -45.4000                   FALSE
2          -43.34         -39.6000                    TRUE
3                         -20.5243                    TRUE
4     -21.8069444        -440.9056                   FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("bdc_coordinates_precision")
> ### * bdc_coordinates_precision
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdc_coordinates_precision
> ### Title: Flag low-precise geographic coordinates
> ### Aliases: bdc_coordinates_precision
> 
> ### ** Examples
> 
> x <- data.frame(
+   lat = c(-21.34, 23.567, 16.798, -10.468),
+   lon = c(-55.38, -13.897, 30.8, 90.675)
+ )
> 
> bdc_coordinates_precision(
+   data = x,
+   lat = "lat",
+   lon = "lon",
+   ndec = 3
+ )
bdc_coordinates_precision:
Flagged 2 records
One column was added to the database.

      lat     lon  .rou
1 -21.340 -55.380 FALSE
2  23.567 -13.897  TRUE
3  16.798  30.800 FALSE
4 -10.468  90.675  TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("bdc_coordinates_transposed")
> ### * bdc_coordinates_transposed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdc_coordinates_transposed
> ### Title: Identify transposed geographic coordinates
> ### Aliases: bdc_coordinates_transposed
> 
> ### ** Examples
> 
> ## Not run: 
> ##D id <- c(1, 2, 3, 4)
> ##D scientificName <- c(
> ##D   "Rhinella major", "Scinax ruber",
> ##D   "Siparuna guianensis", "Psychotria vellosiana"
> ##D )
> ##D decimalLatitude <- c(63.43333, -14.43333, -41.90000, -46.69778)
> ##D decimalLongitude <- c(-17.90000, -67.91667, -13.25000, -13.82444)
> ##D country <- c("BOLIVIA", "bolivia", "Brasil", "Brazil")
> ##D 
> ##D x <- data.frame(
> ##D   id, scientificName, decimalLatitude,
> ##D   decimalLongitude, country
> ##D )
> ##D 
> ##D # Get country code
> ##D x <- bdc_country_standardized(data = x, country = "country")
> ##D 
> ##D bdc_coordinates_transposed(
> ##D   data = x,
> ##D   id = "id",
> ##D   sci_names = "scientificName",
> ##D   lat = "decimalLatitude",
> ##D   lon = "decimalLongitude",
> ##D   country = "country_suggested",
> ##D   countryCode = "countryCode",
> ##D   border_buffer = 0.2,
> ##D   save_outputs = FALSE 
> ##D ) 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("bdc_country_from_coordinates")
> ### * bdc_country_from_coordinates
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdc_country_from_coordinates
> ### Title: Get country names from coordinates
> ### Aliases: bdc_country_from_coordinates
> 
> ### ** Examples
> 
> ## Not run: 
> ##D x <- data.frame(
> ##D   decimalLatitude = c(-22.9834, -39.857030, -17.06811, -46.69778),
> ##D   decimalLongitude = c(-69.095, -68.443588, 37.438108, -13.82444),
> ##D   country = c("", NA, NA, "Brazil"))
> ##D 
> ##D bdc_country_from_coordinates(
> ##D   data = x,
> ##D   lat = "decimalLatitude",
> ##D   lon = "decimalLongitude",
> ##D   country = "country"
> ##D )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("bdc_country_standardized")
> ### * bdc_country_standardized
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdc_country_standardized
> ### Title: Standardizes country names and gets country code
> ### Aliases: bdc_country_standardized
> 
> ### ** Examples
> 
> ## Not run: 
> ##D country <- c("BOLIVIA", "bolivia", "Brasil", "Brazil", "BREZIL")
> ##D x <- data.frame(country)
> ##D 
> ##D bdc_country_standardized(
> ##D   data = x,
> ##D   country = "country"
> ##D )
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("bdc_create_figures")
> ### * bdc_create_figures
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdc_create_figures
> ### Title: Create figures reporting the results of the bdc package
> ### Aliases: bdc_create_figures
> 
> ### ** Examples
> 
> ## Not run: 
> ##D database_id <- c("GBIF_01", "GBIF_02", "GBIF_03", "FISH_04", "FISH_05")
> ##D lat <- c(-19.93580, -13.01667, -22.34161, -6.75000, -15.15806)
> ##D lon <- c(-40.60030, -39.60000, -49.61017, -35.63330, -39.52861)
> ##D .scientificName_emptys <- c(TRUE, TRUE, TRUE, FALSE, FALSE)
> ##D .coordinates_empty <- c(TRUE, TRUE, TRUE, TRUE, TRUE)
> ##D .invalid_basis_of_records <- c(TRUE, FALSE, TRUE, FALSE, TRUE)
> ##D .summary <- c(TRUE, FALSE, TRUE, FALSE, FALSE)
> ##D 
> ##D x <- data.frame(
> ##D   database_id,
> ##D   lat,
> ##D   lon,
> ##D   .scientificName_emptys,
> ##D   .coordinates_empty,
> ##D   .invalid_basis_of_records,
> ##D   .summary
> ##D )
> ##D 
> ##D figures <- 
> ##D bdc_create_figures(
> ##D   data = x, 
> ##D   database_id = "database_id",
> ##D   workflow_step = "prefilter",
> ##D   save_figures = FALSE
> ##D )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("bdc_create_report")
> ### * bdc_create_report
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdc_create_report
> ### Title: Create a report summarizing the results of data quality tests
> ### Aliases: bdc_create_report
> 
> ### ** Examples
> 
> ## Not run: 
> ##D database_id <- c("test_1", "test_2", "test_3", "test_4", "test_5")
> ##D .missing_names <- c(TRUE, TRUE, TRUE, FALSE, FALSE)
> ##D .missing_coordinates <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
> ##D .basisOfRecords_notStandard <- c(TRUE, TRUE, FALSE, TRUE, TRUE)
> ##D .summary <- c(TRUE, FALSE, FALSE, FALSE, FALSE)
> ##D 
> ##D x <- data.frame(
> ##D   database_id,
> ##D   .missing_names,
> ##D   .missing_coordinates,
> ##D   .basisOfRecords_notStandard,
> ##D   .summary
> ##D )
> ##D 
> ##D report <- 
> ##D bdc_create_report(
> ##D   data = x,
> ##D   database_id = "database_id",
> ##D   workflow_step = "prefilter",
> ##D   save_report = FALSE
> ##D )
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("bdc_eventDate_empty")
> ### * bdc_eventDate_empty
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdc_eventDate_empty
> ### Title: Identify records with empty event date
> ### Aliases: bdc_eventDate_empty
> 
> ### ** Examples
> 
> collection_date <- c(
+   NA, "31/12/2015", "2013-06-13T00:00:00Z", "2013-06-20",
+   "", "2013", "0001-01-00"
+ )
> x <- data.frame(collection_date)
> 
> bdc_eventDate_empty(data = x, eventDate = "collection_date")

bdc_eventDate_empty:
Flagged 2 records.
One column was added to the database.

# A tibble: 7 × 2
  collection_date        .eventDate_empty
  <chr>                  <lgl>           
1  <NA>                  FALSE           
2 "31/12/2015"           TRUE            
3 "2013-06-13T00:00:00Z" TRUE            
4 "2013-06-20"           TRUE            
5 ""                     FALSE           
6 "2013"                 TRUE            
7 "0001-01-00"           TRUE            
> 
> 
> 
> 
> cleanEx()
> nameEx("bdc_filter_out_flags")
> ### * bdc_filter_out_flags
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdc_filter_out_flags
> ### Title: Remove columns with the results of data quality tests
> ### Aliases: bdc_filter_out_flags
> 
> ### ** Examples
> 
> x <- data.frame(
+   database_id = c("test_1", "test_2", "test_3", "test_4", "test_5"),
+    kindom = c("Plantae", "Plantae", "Animalia", "Animalia", "Plantae"),
+   .bdc_scientificName_empty = c(TRUE, TRUE, TRUE, FALSE, FALSE),
+   .bdc_coordinates_empty = c(TRUE, FALSE, FALSE, FALSE, FALSE),
+   .bdc_coordinates_outOfRange = c(TRUE, FALSE, FALSE, FALSE, FALSE),
+   .summary = c(TRUE, FALSE, FALSE, FALSE, FALSE)
+ )
> 
> bdc_filter_out_flags(
+   data = x,
+   col_to_remove = "all"
+ )

bdc_fiter_out_flags:
The following columns were removed from the database:
.bdc_scientificName_empty, .bdc_coordinates_empty, .bdc_coordinates_outOfRange, .summary
  database_id   kindom
1      test_1  Plantae
2      test_2  Plantae
3      test_3 Animalia
4      test_4 Animalia
5      test_5  Plantae
> 
> 
> 
> 
> cleanEx()
> nameEx("bdc_filter_out_names")
> ### * bdc_filter_out_names
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdc_filter_out_names
> ### Title: Filter out records according to their taxonomic status
> ### Aliases: bdc_filter_out_names
> 
> ### ** Examples
> 
> df_notes <-
+   data.frame(
+     notes = c(
+       "notFound", "accepted", "accepted | replaceSynonym",
+       "accepted | wasMisspelled",
+       "accepted | wasMisspelled | replaceSynonym",
+       "multipleAccepted",
+       "heterotypic synonym"
+     )
+   )
> 
> bdc_filter_out_names(
+   data = df_notes,
+   taxonomic_status = "accepted",
+   col_name = "notes",
+   opposite = FALSE
+ )
                                      notes
1                                  accepted
2                 accepted | replaceSynonym
3                  accepted | wasMisspelled
4 accepted | wasMisspelled | replaceSynonym
> 
> 
> 
> 
> cleanEx()
> nameEx("bdc_query_names_taxadb")
> ### * bdc_query_names_taxadb
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdc_query_names_taxadb
> ### Title: Harmonizing taxon names against local stored taxonomic databases
> ### Aliases: bdc_query_names_taxadb
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("bdc_quickmap")
> ### * bdc_quickmap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdc_quickmap
> ### Title: Create a map of points using ggplot2
> ### Aliases: bdc_quickmap
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("bdc_scientificName_empty")
> ### * bdc_scientificName_empty
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdc_scientificName_empty
> ### Title: Identify records with empty scientific names
> ### Aliases: bdc_scientificName_empty
> 
> ### ** Examples
> 
> x <- data.frame(scientificName = c("Ocotea odorifera", NA, "Panthera onca", ""))
> bdc_scientificName_empty(data = x, sci_names = "scientificName")

bdc_scientificName_empty:
Flagged 2 records.
One column was added to the database.

# A tibble: 4 × 2
  scientificName     .scientificName_empty
  <chr>              <lgl>                
1 "Ocotea odorifera" TRUE                 
2  <NA>              FALSE                
3 "Panthera onca"    TRUE                 
4 ""                 FALSE                
> 
> 
> 
> 
> cleanEx()
> nameEx("bdc_standardize_datasets")
> ### * bdc_standardize_datasets
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdc_standardize_datasets
> ### Title: Standardize datasets columns based on metadata
> ### Aliases: bdc_standardize_datasets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D metadata <- readr::read_csv(system.file("extdata/Config/DatabaseInfo.csv",
> ##D             package = "bdc"))
> ##D 
> ##D db_standardized <-
> ##D bdc_standardize_datasets(
> ##D   metadata = metadata,
> ##D   format = "csv",
> ##D   overwrite = TRUE,
> ##D   save_database = FALSE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("bdc_summary_col")
> ### * bdc_summary_col
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdc_summary_col
> ### Title: Create or update the column summarizing the results of data
> ###   quality tests
> ### Aliases: bdc_summary_col
> 
> ### ** Examples
> 
> .missing_names <- c(TRUE, TRUE, TRUE, FALSE, FALSE)
> .missing_coordinates <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
> x <- data.frame(.missing_names, .missing_coordinates)
> 
> bdc_summary_col(data = x)

bdc_summary_col:
Flagged 4 records.
One column was added to the database.

  .missing_names .missing_coordinates .summary
1           TRUE                 TRUE     TRUE
2           TRUE                FALSE    FALSE
3           TRUE                FALSE    FALSE
4          FALSE                 TRUE    FALSE
5          FALSE                FALSE    FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("bdc_year_from_eventDate")
> ### * bdc_year_from_eventDate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdc_year_from_eventDate
> ### Title: Extract year from eventDate
> ### Aliases: bdc_year_from_eventDate
> 
> ### ** Examples
> 
> collection_date <- c(
+   NA, "31/12/2015", "2013-06-13T00:00:00Z", "2019-05-20",
+   "", "2013", "0001-01-00", "20", "1200"
+ )
> x <- data.frame(collection_date)
> 
> bdc_year_from_eventDate(data = x, eventDate = "collection_date")

bdc_year_from_eventDate:
Four-digit year were extracted from 6 records.

       collection_date year
1                 <NA>   NA
2           31/12/2015 2015
3 2013-06-13T00:00:00Z 2013
4           2019-05-20 2019
5                        NA
6                 2013 2013
7           0001-01-00    1
8                   20   NA
9                 1200 1200
> 
> 
> 
> 
> cleanEx()
> nameEx("bdc_year_outOfRange")
> ### * bdc_year_outOfRange
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdc_year_outOfRange
> ### Title: Identify records with year out-of-range
> ### Aliases: bdc_year_outOfRange
> 
> ### ** Examples
> 
> collection_date <- c(
+   NA, "31/12/2029", "2013-06-13T00:00:00Z", "2013-06-20",
+   "", "2013", 1650, "0001-01-00"
+ )
> x <- data.frame(collection_date)
> 
> bdc_year_outOfRange(
+ data = x, 
+ eventDate = "collection_date", 
+ year_threshold = 1900)

bdc_year_outOfRange:
Flagged 3 records.
One column was added to the database.

       collection_date .year_outOfRange
1                 <NA>             TRUE
2           31/12/2029            FALSE
3 2013-06-13T00:00:00Z             TRUE
4           2013-06-20             TRUE
5                                  TRUE
6                 2013             TRUE
7                 1650            FALSE
8           0001-01-00            FALSE
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.256 0.054 4.31 0.001 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
